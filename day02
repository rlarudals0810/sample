## day02

### A03DataTest

원시타입 primitive type >>
	1. 정수는 기본 타입이 int 입니다.
	2. 실수는 기본 타입이 double 입니다.
	3. 논리형식 boolean은 참(true) 또는 거짓(false)을 표현합니다.
	4. 문자형식 char은 문자 1개를 ''안에 표현합니다.

리터럴과 데이터 형식
	리터럴은 값 그 자체, 데이터 형식에 따라 표시하는 방법이 다릅니다.
		- 1234 는 int정수, 메모리 크기는 4바이트
		- 1234L 은 long정수,		"	8바이트
		- 3.1419 는 double 실수,		8바이트(값의 표현범위, 소수점 이하 자리수 차이)
		- 3.1419F 는 float 실수, 		4바이트
		- 'a'또는 '6'는 char 문자1개,	2바이트
		- true 또는 false 2가지로 표시하는 boolean 논리형,	1바이트
		- 원시 타입은 아니지만 다른 프로그래밍 언어에서는 기본 형식으로 사용하는
			"java", "1234"는 문자열.	메모리 크기는 문자열 안에 문자의 개수에 따라 할당.

### A04DataExam
	- 초기값을 저장하여 변수 선언
	- 실수와 정수의 곱셈
	- 정수 형식으로 강제 캐스팅

대입연산 = 기준으로 오른쪽, 왼쪽 각각 데이터 형식이 일치해야한다.
결과값이 실수이면 정수형 변수에 저장 못합니다.

데이터 형식에 따른 변수 선언 >>
	선언이란? 변수가 저장할 데이터의 형식과 이름을 정하는 것.
	선언 방법 1) int age = 26;		//선언과 초기값 저장
	선언 방법 2)
	
			int age;			// 초기값 없음
			System.out.println("나이:"+age);		// 문법 오류(컴파일 오류)
			:
			age = 26;			// 필요할 떄 값 저장
			
			
비트(bit)와 바이트(byte) >>
	- 메모리에 데이터를 저장할 때 모든 값은 0과 1로만 합니다. (2진법, binary)
	- 정수, 실수, 문자열, 문자와 같은 데이커가 모두 2진법으로 변환됩니다.
	- 비트는 0 또는 1을 표시하는 한 자리
 - 바이트는 8비트가 모여서 1바이트를 만듭니다. (1byte = 8bit)
 - 1024바이트가 모이면 1KB(kilo byte)
 - 1024KB는 1MB, 1024MB는 1GB(기가), 1024GB는 1TB(테라), 1024TB는 1PB(페타)
 - 원시형 데이터 타입은 각각 다른 메모리 바이트를 할당 받게 됩니다.
 
 
### A05VariableExam
	- 초기값 없이 변수 선언
	- 2개의 정수 나눗셈
	- 실수 형식 결과값을 위한 캐스팅
 	
 	
## 요약
1. 데이터의 기본 형식과 크기
	정수형 : byte(1byte) < short(2byte) < *int(4byte) < long(8byte)
	실수형 : float(4byte) < *double(8byte)
	논리형 : *boolean(1byte)
	문자형 : *char(2byte)
	
	정수 8byte long과 실수 8byte double은 메모리 크기는 같지만 표현 형식이 다릅니다.
	double 형식이 훨씬 매우 큰 범위의 값을 표현합니다.
	
2. 더하기/빼기/곱하기/나누기 연산
	정수와 정수의 연산 결과는 정수
	실수가 1개라도 있으면 결과는 실수
	연산결과의 데이터 형식과 저장하는 변수의 형식이 동일해야 합니다.
	단, 아래와 같은 자동 캐스팅의 경우는 오류없이 실행됩니다.
	
3. 캐스팅 casting 은 데이터 형식 변환을 말합니다.
	자동 캐스팅(묵시적 형변환), (자동으로 데이터 형식이 변환됩니다.)
		ex) int 값을 double 변수로 저장할 때			double weight = 57;	(O)
			반대로 double 값을 int 변수로 저장하는 것은 오류	int age = 34.2; (X)
	
	강제 캐스팅(명시적 형변환), (직접적인 명령으로 데이터 형식이 변환됩니다.)
		ex) int age = 34.2; 와 같은 데이터 변환을 강제로 합니다. 이런 경우 데이터가 손실 될 수 있습니다.
